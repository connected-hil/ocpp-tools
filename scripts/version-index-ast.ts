import {
  createPrinter,
  createSourceFile,
  factory,
  ListFormat,
  NewLineKind,
  type Node,
  ScriptKind,
  ScriptTarget,
  EmitHint,
  addSyntheticLeadingComment,
  SyntaxKind,
} from "typescript";
import { type GeneratorDefinition } from "./common";
import fs from "fs";

const typesExportsAST = (descriptions: GeneratorDefinition[]): Node[] =>
  descriptions.map(({ title, typeFile }) =>
    factory.createExportDeclaration(
      undefined,
      true,
      factory.createNamedExports([
        factory.createExportSpecifier(
          false,
          undefined,
          factory.createIdentifier(title)
        ),
      ]),
      factory.createStringLiteral(
        [".", typeFile.split("/").reverse()[0].replace(/\.ts$/, "")].join("/")
      ),
      undefined
    )
  );

export const generateVersionIndex = (
  version: string,
  descriptions: GeneratorDefinition[]
): void => {
  const filename = ["src", "types", version, "index.ts"].join("/");
  const printer = createPrinter({ newLine: NewLineKind.LineFeed });

  const sourceFile = createSourceFile(
    filename,
    "",
    ScriptTarget.Latest,
    false,
    ScriptKind.TS
  );

  fs.writeFileSync(
    filename,
    [
      printer.printNode(
        EmitHint.Unspecified,
        addSyntheticLeadingComment(
          factory.createEmptyStatement(),
          SyntaxKind.SingleLineCommentTrivia,
          "Generated by scripts/version-index-ast.ts"
        ),
        sourceFile
      ),
      printer.printList(
        ListFormat.MultiLine,
        factory.createNodeArray(typesExportsAST(descriptions)),
        sourceFile
      ),
      printer.printNode(
        EmitHint.Unspecified,
        factory.createExportDeclaration(
          undefined,
          false,
          factory.createNamedExports([
            factory.createExportSpecifier(false, undefined, "Action"),
          ]),
          factory.createStringLiteral([".", "rpc-call"].join("/")),
          undefined
        ),
        sourceFile
      ),
      printer.printNode(
        EmitHint.Unspecified,
        factory.createExportDeclaration(
          undefined,
          false,
          factory.createNamedExports([
            factory.createExportSpecifier(false, undefined, "ErrorCode"),
          ]),
          factory.createStringLiteral([".", "rpc-call-error"].join("/")),
          undefined
        ),
        sourceFile
      ),
    ].join("\n")
  );
};
